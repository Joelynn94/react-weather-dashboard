{"version":3,"sources":["components/Search.js","components/ForecastCard.js","components/Forecast.js","components/HighlightCard.js","components/TodayHighlights.js","components/CurrentWeatherCard.js","components/CurrentWeather.js","App.js","index.js"],"names":["useStyles","makeStyles","marginTop","width","Search","getQuerySearch","useState","search","setSearch","formSubmit","e","preventDefault","className","FormControl","InputLabel","htmlFor","Input","id","value","onChange","input","target","startAdornment","InputAdornment","position","SearchOutlined","Button","variant","color","type","onClick","disabled","disableElevation","ForecastCard","img","desc","temp","date","city","country","Card","CardContent","CardMedia","component","alt","image","title","Typography","marginBottom","Weather","cityName","weather","getDate","dateText","Date","Intl","DateTimeFormat","year","month","day","hour","minute","second","hour12","format","length","Grid","container","spacing","map","weatherItem","item","index","xs","md","lg","process","icon","description","Math","round","main","dt_txt","key","HighlightCard","stat","TodayHighlights","humidity","wind","speed","visibility","feels_like","temp_min","temp_max","CurrentWeatherCard","CurrentWeather","App","weatherDetails","results","setResults","query","setQuery","useEffect","a","URL","axios","get","params","units","response","data","name","list","console","log","fetchWeather","Container","Forecast","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kWAKMA,EAAYC,YAAW,CAC3B,UAAW,CACT,kBAAmB,CACjBC,UAAW,QAEb,eAAgB,CACdC,MAAO,QAET,iBAAkB,CAChBD,UAAW,WAmEFE,MA9Df,YAAqC,IAAnBC,EAAkB,EAAlBA,eAChBL,IADkC,MAGNM,mBAAS,IAHH,mBAG3BC,EAH2B,KAGnBC,EAHmB,KAW5BC,EAAa,SAACC,GAClBA,EAAEC,iBACFN,EAAeE,GACfC,EAAU,KAGZ,OACE,6BAASI,UAAU,kBACjB,kBAACC,EAAA,EAAD,CAAaD,UAAU,eACrB,kBAACE,EAAA,EAAD,CACEC,QAAQ,6BADV,qBAKA,kBAACC,EAAA,EAAD,CACEC,GAAG,4BACHC,MAAOX,EACPY,SAAU,SAACT,GAAD,OAvBGU,EAuBgBV,EAAEW,OAAOH,WAtB7B,MAAXX,GACFC,EAAUY,IAFM,IAACA,GAwBbE,eACE,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SACvB,kBAACC,EAAA,EAAD,SAIO,KAAXlB,EACC,kBAACmB,EAAA,EAAD,CACCC,QAAQ,YACRC,MAAM,UACNhB,UAAU,gBACViB,KAAK,SACLC,QAASrB,EACTsB,UAAQ,GANT,UAUG,kBAACL,EAAA,EAAD,CACAC,QAAQ,YACRC,MAAM,UACNhB,UAAU,gBACViB,KAAK,SACLC,QAASrB,EACTuB,kBAAgB,GANhB,a,kCCjCCC,MA7Bf,YAA+D,IAAxCC,EAAuC,EAAvCA,IAAKC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,QAClD,OACE,oCACE,kBAACC,EAAA,EAAD,CAAMb,QAAQ,YACZ,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAU,MACVC,IAAKT,EACLU,MAAOX,EACPY,MAAOX,IAET,kBAACY,EAAA,EAAD,CAAYpB,QAAQ,MACjBQ,GAEH,kBAACY,EAAA,EAAD,CAAYpB,QAAQ,MACjBS,GAEH,kBAACW,EAAA,EAAD,CAAYpB,QAAQ,MACjBU,GAEH,kBAACU,EAAA,EAAD,CAAYpB,QAAQ,MAApB,UACMW,EADN,aACeC,QClBnBvC,EAAYC,YAAW,CAC3B,UAAW,CACT,WAAY,CACVC,UAAW,OACX8C,aAAc,WA+CLC,MA1Cf,YAAgD,IAA9BC,EAA6B,EAA7BA,SAAUX,EAAmB,EAAnBA,QAASY,EAAU,EAAVA,QACnCnD,IAEA,IAAMoD,EAAU,SAACC,GACf,IAKMhB,EAAO,IAAIiB,KAAKD,GACtB,OAAO,IAAIE,KAAKC,eAAe,QANjB,CACZC,KAAM,UAAWC,MAAO,UAAWC,IAAK,UACxCC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,UAC5CC,QAAQ,IAGuCC,OAAO3B,IAG1D,OACE,iCACIc,EAAQc,OAAS,EAChB,kBAAClB,EAAA,EAAD,CAAYpB,QAAQ,KAAKf,UAAU,WAAnC,YAGI,GAEP,kBAACsD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACtBjB,EAAQkB,KAAI,SAACC,GAAD,OACXA,EAAYnB,QAAQkB,KAAI,SAACE,EAAMC,GAAP,OACtB,kBAACN,EAAA,EAAD,CAAMK,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,EAAD,CACEzC,IAAK0C,2BAAA,yBAA2CL,EAAKM,KAAhD,QACL1C,KAAI,UAAKoC,EAAKO,aACd1C,KAAI,UAAK2C,KAAKC,MAAMV,EAAYW,KAAK7C,MAAjC,SACJC,KAAMe,EAAQkB,EAAYY,QAC1B5C,KAAMY,EACNX,QAASA,EACT4C,IAAKX,cC3BNY,MAjBf,YAAuC,IAAftC,EAAc,EAAdA,MAAOuC,EAAO,EAAPA,KAC7B,OACE,oCACE,kBAAC7C,EAAA,EAAD,CAAMb,QAAQ,YACZ,kBAACc,EAAA,EAAD,KACE,kBAACM,EAAA,EAAD,CAAYpB,QAAQ,MACjBmB,GAEH,kBAACC,EAAA,EAAD,CAAYpB,QAAQ,MACjB0D,OCPPrF,EAAYC,YAAW,CAC3B,UAAW,CACT,cAAe,CACbC,UAAW,WA4DFoF,MAvDf,YAAuC,IAAZnC,EAAW,EAAXA,QAGzB,OAFAnD,IAGE,6BAASY,UAAU,cACfuC,EAAQc,OAAS,EACb,kBAAClB,EAAA,EAAD,CAAYpB,QAAQ,KAAKf,UAAU,WAAnC,sBAGE,kBAACmC,EAAA,EAAD,CAAYpB,QAAQ,KAAKf,UAAU,WAAnC,sDAIR,kBAACsD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMK,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1BxB,EAAQc,OAAS,EACd,kBAAC,EAAD,CAAenB,MAAM,WAAWuC,KAAI,UAAKlC,EAAQ,GAAG8B,KAAKM,SAArB,OAClC,IAGT,kBAACrB,EAAA,EAAD,CAAMK,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1BxB,EAAQc,OAAS,EACd,kBAAC,EAAD,CAAenB,MAAM,aAAauC,KAAI,UAAKlC,EAAQ,GAAGqC,KAAKC,MAArB,SACpC,IAGT,kBAACvB,EAAA,EAAD,CAAMK,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1BxB,EAAQc,OAAS,EACd,kBAAC,EAAD,CAAenB,MAAM,aAAauC,KAAI,UAAKlC,EAAQ,GAAGuC,WAAhB,QACpC,IAGT,kBAACxB,EAAA,EAAD,CAAMK,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1BxB,EAAQc,OAAS,EACd,kBAAC,EAAD,CAAenB,MAAM,aAAauC,KAAI,UAAKlC,EAAQ,GAAG8B,KAAKU,WAArB,WACpC,IAGT,kBAACzB,EAAA,EAAD,CAAMK,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1BxB,EAAQc,OAAS,EACd,kBAAC,EAAD,CAAenB,MAAM,MAAMuC,KAAI,UAAKlC,EAAQ,GAAG8B,KAAKW,SAArB,WAC7B,IAGT,kBAAC1B,EAAA,EAAD,CAAMK,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1BxB,EAAQc,OAAS,EACd,kBAAC,EAAD,CAAenB,MAAM,OAAOuC,KAAI,UAAKlC,EAAQ,GAAG8B,KAAKY,SAArB,WAC9B,OC5BFC,MA7Bf,YAAqE,IAAxC5D,EAAuC,EAAvCA,IAAKC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,QACxD,OACE,oCACE,kBAACC,EAAA,EAAD,CAAMb,QAAQ,YACZ,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAU,MACVC,IAAKT,EACLU,MAAOX,EACPY,MAAOX,IAET,kBAACY,EAAA,EAAD,CAAYpB,QAAQ,MACjBQ,GAEH,kBAACY,EAAA,EAAD,CAAYpB,QAAQ,MACjBS,GAEH,kBAACW,EAAA,EAAD,CAAYpB,QAAQ,MACjBU,GAEH,kBAACU,EAAA,EAAD,CAAYpB,QAAQ,MAApB,UACMW,EADN,aACeC,QCpBnBvC,EAAYC,YAAW,CAC3B,UAAW,CACT,mBAAoB,CAClBC,UAAW,WAmCF6F,MA9Bf,YAAyD,IAA/B7C,EAA8B,EAA9BA,SAAUX,EAAoB,EAApBA,QAASY,EAAW,EAAXA,QAa3C,OAZAnD,IAaE,6BAASY,UAAU,mBACfuC,EAAQc,OAAS,EACb,kBAAC,EAAD,CACF/B,IAAK0C,2BAAA,yBAA2CzB,EAAQ,GAAGA,QAAQ,GAAG0B,KAAjE,QACL1C,KAAI,UAAKgB,EAAQ,GAAGA,QAAQ,GAAG2B,aAC/B1C,KAAI,UAAK2C,KAAKC,MAAM7B,EAAQ,GAAG8B,KAAK7C,MAAhC,SACJC,KAjBQ,SAACgB,GACf,IAKMhB,EAAO,IAAIiB,KAAKD,GACtB,OAAO,IAAIE,KAAKC,eAAe,QANjB,CACZC,KAAM,UAAWC,MAAO,UAAWC,IAAK,UACxCC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,UAC5CC,QAAQ,IAGuCC,OAAO3B,GAU5Ce,CAAQD,EAAQ,GAAG+B,QACzB5C,KAAMY,EACNX,QAASA,IAEN,KCwBEyD,MAlDf,WAAgB,IAAD,EAEiB1F,mBAAS,CACrC4C,SAAU,GACVX,QAAS,GACT0D,eAAgB,KALL,mBAENC,EAFM,KAEGC,EAFH,OAOa7F,mBAAS,IAPtB,mBAON8F,EAPM,KAOCC,EAPD,KAgCb,OAvBAC,qBAAU,YACU,uCAAG,8BAAAC,EAAA,sEAGXC,EAHW,6DAGiDJ,EAHjD,kBAGgExB,oCAHhE,SAKM6B,IAAMC,IAAIF,EAAK,CACpCG,OAAQ,CACNC,MAAO,cAPM,OAKXC,EALW,OAUjBV,EAAW,CACTjD,SAAU2D,EAASC,KAAKxE,KAAKyE,KAC7BxE,QAASsE,EAASC,KAAKxE,KAAKC,QAC5B0D,eAAgBY,EAASC,KAAKE,OAbf,gDAgBjBC,QAAQC,IAAR,MAhBiB,yDAAH,qDAmBlBC,KACC,CAACf,IAGF,8BACE,kBAACgB,EAAA,EAAD,KACE,kBAAClD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMK,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,EAAD,CAAQtE,eAAgB,SAACE,GAAD,OAAY8F,EAAS9F,MAC7C,kBAAC,EAAD,CAAgB2C,SAAUgD,EAAQhD,SAAUX,QAAS2D,EAAQ3D,QAASY,QAAS+C,EAAQD,kBAEzF,kBAAC/B,EAAA,EAAD,CAAMK,MAAI,EAACE,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,EAAD,CAAkBxB,QAAS+C,EAAQD,iBACnC,kBAACoB,EAAD,CAAUnE,SAAUgD,EAAQhD,SAAUX,QAAS2D,EAAQ3D,QAASY,QAAS+C,EAAQD,sBChD7FqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a637352b.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport { Button, FormControl, InputLabel, Input, InputAdornment } from '@material-ui/core'\nimport { SearchOutlined } from '@material-ui/icons'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  '@global': {\n    '.search-section': {\n      marginTop: '5rem'\n    },\n    '.search-form': {\n      width: '100%'\n    },\n    '.search-button': {\n      marginTop: '1rem'\n    },\n  }\n});\n\nfunction Search({ getQuerySearch }) {\n  useStyles();\n\n  const [search, setSearch] = useState('')\n\n  const searchInput = (input) => {\n    if(!search === '') {\n      setSearch(input)\n    }\n  }\n\n  const formSubmit = (e) => {\n    e.preventDefault()\n    getQuerySearch(search)\n    setSearch('')\n  }\n\n  return (\n    <section className=\"search-section\">\n      <FormControl className='search-form'>\n        <InputLabel \n          htmlFor=\"input-with-icon-adornment\"\n        >\n          Search for a city\n        </InputLabel>\n        <Input\n          id=\"input-with-icon-adornment\"\n          value={search}\n          onChange={(e) => searchInput(e.target.value)}\n          startAdornment={\n            <InputAdornment position=\"start\">\n              <SearchOutlined />\n            </InputAdornment>\n          }\n        />\n        {(search === '') \n        ? (<Button \n            variant=\"contained\" \n            color=\"primary\"\n            className=\"search-button\" \n            type=\"submit\" \n            onClick={formSubmit}\n            disabled\n         >\n          Search\n          </Button>\n        ) : ( <Button \n              variant=\"contained\" \n              color=\"primary\"\n              className=\"search-button\" \n              type=\"submit\" \n              onClick={formSubmit}\n              disableElevation\n              >  \n                Search\n              </Button>\n        )}\n      </FormControl>\n    </section>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport { Card, CardContent, CardMedia, Typography } from '@material-ui/core'\n\nfunction ForecastCard({img, desc, temp, date, city, country}) {\n  return (\n    <>\n      <Card variant='outlined'>\n        <CardContent>\n          <CardMedia \n            component=\"img\"\n            alt={desc}\n            image={img}\n            title={desc}\n          />\n          <Typography variant=\"h5\">\n            {desc}\n          </Typography>\n          <Typography variant=\"h2\">\n            {temp}\n          </Typography>\n          <Typography variant=\"h4\">\n            {date}\n          </Typography>\n          <Typography variant='h5'>\n            {`${city}, ${country}`}\n          </Typography>\n        </CardContent>\n      </Card>\n    </>\n  )\n}\n\nexport default ForecastCard\n","import React from 'react'\nimport { Grid, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport ForecastCard from './ForecastCard'\n\nconst useStyles = makeStyles({\n  '@global': {\n    '.heading': {\n      marginTop: '3rem',\n      marginBottom: '1rem'\n    },\n  }\n});\n\nfunction Weather({cityName, country, weather}) {\n  useStyles()\n\n  const getDate = (dateText) => {\n    let options = {\n      year: 'numeric', month: 'numeric', day: 'numeric',\n      hour: 'numeric', minute: 'numeric', second: 'numeric', \n      hour12: false\n    };\n    const date = new Date(dateText)\n    return new Intl.DateTimeFormat('en-US', options).format(date)\n  }\n\n  return (\n    <section>\n      {(weather.length > 0)\n      ? (<Typography variant=\"h2\" className='heading'>\n          Forecast\n      </Typography>\n        ) : ('')\n      }\n      <Grid container spacing={2}> \n        {weather.map((weatherItem) => (\n          weatherItem.weather.map((item, index) => (\n            <Grid item xs={12} md={6} lg={4}> \n              <ForecastCard \n                img={process.env.PUBLIC_URL + `/weather-icons/${item.icon}.png`} \n                desc={`${item.description}`}\n                temp={`${Math.round(weatherItem.main.temp)}\\u00b0F`}\n                date={getDate(weatherItem.dt_txt)}\n                city={cityName}\n                country={country}\n                key={index}\n              />\n            </Grid>\n          ))\n        ))}\n      </Grid> \n    </section>\n  )\n}\n\nexport default Weather\n","import React from 'react'\nimport { Card, CardContent, Typography } from '@material-ui/core'\n\nfunction HighlightCard({title, stat}) {\n  return (\n    <>\n      <Card variant='outlined'>\n        <CardContent>\n          <Typography variant=\"h5\">\n            {title}\n          </Typography>\n          <Typography variant=\"h3\">\n            {stat}\n          </Typography>\n        </CardContent>\n      </Card>\n    </>\n  )\n}\n\nexport default HighlightCard\n","import React from 'react'\nimport { Grid, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport HighlightCard from './HighlightCard'\n\nconst useStyles = makeStyles({\n  '@global': {\n    '.highlights': {\n      marginTop: '2rem'\n    },\n  }\n});\n\nfunction TodayHighlights({ weather }) {\n  useStyles()\n\n  return (\n    <section className='highlights'>\n      {(weather.length > 0)\n        ? ( <Typography variant=\"h2\" className='heading'>\n              Today's Highlights\n            </Typography>\n        ) : ( <Typography variant=\"h2\" className='heading'>\n                No data to show... please try searching for a city\n              </Typography>)\n      }\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6} lg={4}>\n          {(weather.length > 0)\n            ? (<HighlightCard title='Humidity' stat={`${weather[0].main.humidity}%`}/>\n            ) : ('')\n          }\n        </Grid>\n        <Grid item xs={12} md={6} lg={4}>\n          {(weather.length > 0)\n            ? (<HighlightCard title='Wind Speed' stat={`${weather[0].wind.speed}mph`}/>\n            ) : ('')\n          }\n        </Grid>\n        <Grid item xs={12} md={6} lg={4}>\n          {(weather.length > 0)\n            ? (<HighlightCard title='Visibility' stat={`${weather[0].visibility}ft`}/>\n            ) : ('')\n          }\n        </Grid>\n        <Grid item xs={12} md={6} lg={4}>\n          {(weather.length > 0)\n            ? (<HighlightCard title='Feels Like' stat={`${weather[0].main.feels_like}\\u00b0F`}/>\n            ) : ('')\n          }\n        </Grid>\n        <Grid item xs={12} md={6} lg={4}>\n          {(weather.length > 0)\n            ? (<HighlightCard title='Low' stat={`${weather[0].main.temp_min}\\u00b0F`}/>\n            ) : ('')\n          }\n        </Grid>\n        <Grid item xs={12} md={6} lg={4}>\n          {(weather.length > 0)\n            ? (<HighlightCard title='High' stat={`${weather[0].main.temp_max}\\u00b0F`}/>\n            ) : ('')\n          }\n        </Grid>\n      </Grid>\n    </section>\n  )\n}\n\nexport default TodayHighlights\n","import React from 'react'\nimport { Card, CardContent, CardMedia, Typography } from '@material-ui/core'\n\nfunction CurrentWeatherCard({img, desc, temp, date, city, country}) {\n  return (\n    <>\n      <Card variant='outlined'>\n        <CardContent>\n          <CardMedia \n            component=\"img\"\n            alt={desc}\n            image={img}\n            title={desc}\n          />\n          <Typography variant=\"h5\">\n            {desc}\n          </Typography>\n          <Typography variant=\"h2\">\n            {temp}\n          </Typography>\n          <Typography variant=\"h4\">\n            {date}\n          </Typography>\n          <Typography variant='h5'>\n            {`${city}, ${country}`}\n          </Typography>\n        </CardContent>\n      </Card>\n    </>\n  )\n}\n\nexport default CurrentWeatherCard\n","import React from 'react'\nimport CurrentWeatherCard from './CurrentWeatherCard'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  '@global': {\n    '.current-weather': {\n      marginTop: '3rem',\n    },\n  }\n});\n\nfunction CurrentWeather({ cityName, country, weather }) {\n  useStyles()\n\n  const getDate = (dateText) => {\n    let options = {\n      year: 'numeric', month: 'numeric', day: 'numeric',\n      hour: 'numeric', minute: 'numeric', second: 'numeric', \n      hour12: false\n    };\n    const date = new Date(dateText)\n    return new Intl.DateTimeFormat('en-US', options).format(date)\n  }\n\n  return (\n    <section className='current-weather'>\n      {(weather.length > 0)\n        ? ( <CurrentWeatherCard \n          img={process.env.PUBLIC_URL + `/weather-icons/${weather[0].weather[0].icon}.png`} \n          desc={`${weather[0].weather[0].description}`}\n          temp={`${Math.round(weather[0].main.temp)}\\u00b0F`}\n          date={getDate(weather[0].dt_txt)}\n          city={cityName}\n          country={country}\n        />\n        ) : ('')\n      }\n    </section>\n  )\n}\n\nexport default CurrentWeather\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios'\nimport { Container, Grid } from '@material-ui/core';\nimport 'fontsource-roboto';\n\nimport Search from './components/Search'\nimport Forecast from './components/Forecast'\nimport TodaysHighlights from './components/TodayHighlights'\nimport CurrentWeather from './components/CurrentWeather';\n\nfunction App() {\n\n  const [results, setResults] = useState({\n    cityName: '',\n    country: '',\n    weatherDetails: []\n  })\n  const [query, setQuery] = useState('')\n\n  useEffect(() => {\n    const fetchWeather = async () => {\n\n      try {\n        const URL = `https://api.openweathermap.org/data/2.5/forecast?q=${query}&appid=${process.env.REACT_APP_API_KEY}`\n    \n        const response = await axios.get(URL, {\n          params: {\n            units: 'imperial',\n          }\n        })\n        setResults({\n          cityName: response.data.city.name,\n          country: response.data.city.country,\n          weatherDetails: response.data.list\n        })\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    fetchWeather()\n  }, [query])\n\n  return (\n    <main>\n      <Container>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3} lg={4}>\n            <Search getQuerySearch={(search) => setQuery(search)} />\n            <CurrentWeather cityName={results.cityName} country={results.country} weather={results.weatherDetails} />\n          </Grid>\n          <Grid item xs={12} md={9} lg={8}>\n            <TodaysHighlights weather={results.weatherDetails} />\n            <Forecast cityName={results.cityName} country={results.country} weather={results.weatherDetails} />\n          </Grid>\n        </Grid>\n      </Container>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}